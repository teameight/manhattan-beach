$persp: 80;
$persp-o: -12;

$wave_offset:600; // this also sets the speed of the wave parallax compared to scroll. higher = slower.
$wave_reveal: 18; //25.118;

$v_o_seed: $wave_reveal / $wave_offset;

$v_o_factor: $v_o_seed * $persp; //this number increases as $persp-o increases

#page-wrap {
  .bottom {
    width: 100%;
    height:1px;
  }
}

#body {
    width: 100vw;
    height: 100vh;
    overflow-x: hidden;
    overflow-y: scroll;
    perspective: $persp * 1vw;
    perspective-origin: center $persp-o*1vw;
    background: rgba(225, 236, 257, 1); 

    .below & {
      background: rgb(0,0,0);
    }
}
.below #body {
  /*perspective-origin: center 45vh;*/
  /*background: linear-gradient(2deg, $under-mid 0%, $under-mid 40%, $under-dark 85%, $under-black 92%, $under-black 100%);*/
}

.b-bg {
  width: 100%;
  height:100%;
  pointer-events: none;
  position: absolute;
  top:0;
  left: 0;
  right:0;
  bottom:0;
  /*overflow: hidden;*/
  .below & {
    background: linear-gradient(0deg, rgb(0,0,0) 0%, $under-mid 5%, $under-mid 40%, $under-dark 85%, $under-black 92%, $under-black 100%);
  }

}
.b-inner {
  width: 100%;
  height:auto;
  pointer-events: none;
  @include preserve3d;
  /*overflow: hidden;*/
  &.static-wave {
    background-color: #e1ecff;
  }
}

.lastwave.wave-seg {
  background: blue;
}

.wave-wrap {
  width: 100vw;
  position: relative;
  top: 0; 
  @include preserve3d;
  /*overflow: hidden;*/

  .below & {
    /*display:none;*/
  }

}

.wave-full.static-wave {
  width: 100%;
  float: left;
}

.waterline {
  position: absolute;
  top:0;
  left: 0;
  width: 100vw;
  z-index: 100;

  > div {
    border-bottom:2px solid orange;
    box-sizing: border-box;
    width: 100vw;
    height:0px;
    position:relative;

    &.window-w {
      border-color:yellow;
    }

    &.window-h {
      border-color:magenta;
    }

    &.wave-reveal {
      border-color:blue;
    }

    &.persp-o {
      border-color:green;
    }
  }
}


.wave-seg {
  width: 100%;
  transform-origin: center center;
  position: relative;
  top: $wave_offset * 1vw;
  height: 26.44vw;
  left: 0;
  z-index: 0;
  transform-origin: top center;
  
  /*border-top:1px solid red;*/

  .below &:not(.wave-l-8){
    visibility: hidden;
  }

  img {
    display: block;
    width: 100%;
    height: auto;
  }

}

$vert_offset: $v_o_factor*4; // half the ((height/width)-overlap) of each element
$translate_z: $persp * ( 1 - ( $persp / $vert_offset ) );
$scale: ( $persp - $translate_z ) / $persp;

.waterline {
  top:$vert_offset * 1px;
  top:0;
}

.wave-back {
  /*top: ($wave_offset - 400) * 1vw;*/
  height: 20vw;
  background: rgba(225, 236, 257, 1);
  /*transform:translateZ( $translate_z * 1vw ) scale( $scale );*/
}


.wave-l-1 {
  transform:translateZ( $translate_z * 1vw ) scale( $scale );
}

$vert_offset: $vert_offset + $v_o_factor;
$translate_z: $persp * ( 1 - ($persp / $vert_offset ) );
$scale: ( $persp - $translate_z ) / $persp;

.wave-l-2 {
  transform:translateZ( $translate_z * 1vw ) scale( $scale );
}

$vert_offset: $vert_offset + $v_o_factor;
$translate_z: $persp * ( 1 - ($persp / $vert_offset ) );
$scale: ( $persp - $translate_z ) / $persp;

.wave-l-3 {
  transform:translateZ( $translate_z * 1vw ) scale( $scale );
}

$vert_offset: $vert_offset + $v_o_factor;
$translate_z: $persp * ( 1 - ($persp / $vert_offset ) );
$scale: ( $persp - $translate_z ) / $persp;

.wave-l-4 {
  transform:translateZ( $translate_z * 1vw ) scale( $scale ); 
}

$vert_offset: $vert_offset + $v_o_factor;
$translate_z: $persp * ( 1 - ($persp / $vert_offset ) );
$scale: ( $persp - $translate_z ) / $persp;

.wave-l-5 {
  transform:translateZ( $translate_z * 1vw ) scale( $scale ); 
}

$vert_offset: $vert_offset + $v_o_factor;
$translate_z: $persp * ( 1 - ($persp / $vert_offset ) );
$scale: ( $persp - $translate_z ) / $persp;

.wave-l-6 {
  transform:translateZ( $translate_z * 1vw ) scale( $scale ); 
}

$vert_offset: $vert_offset + $v_o_factor;
$translate_z: $persp * ( 1 - ($persp / $vert_offset ) );
$scale: ( $persp - $translate_z ) / $persp;

.wave-l-7 {
  transform:translateZ( $translate_z * 1vw ) scale( $scale ); 
  /*background: orange;*/
}

$vert_offset: $vert_offset + $v_o_factor;
$translate_z: $persp * ( 1 - ($persp / $vert_offset ) );
$scale: ( $persp - $translate_z ) / $persp;

.wave-l-8 {
  transform:translateZ( $translate_z * 1vw ) scale( $scale ); 
  height: auto;
  @include preserve3d;
}

#canvas-container {
  height: 30vw;
  width: 100%;
  margin: 0 auto;
  position: relative;
  overflow: hidden;
}
#waveCanvas{
  height:40vw;
  width:110vw;
  position:absolute;
  top:-5vw;
  left:-5vw;
}